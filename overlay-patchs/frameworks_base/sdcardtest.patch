
project frameworks/base/
diff --git a/core/java/android/os/Environment.java b/core/java/android/os/Environment.java
old mode 100644
new mode 100755
index a3350da..92e230b
--- a/core/java/android/os/Environment.java
+++ b/core/java/android/os/Environment.java
@@ -112,131 +112,138 @@ public class Environment {
         // TODO: generalize further to create package-specific environment
 
         /** External storage dirs, as visible to vold */
-        private final File[] mExternalDirsForVold;
+        private File[] mExternalDirsForVold;
         /** External storage dirs, as visible to apps */
-        private final File[] mExternalDirsForApp;
+        private File[] mExternalDirsForApp;
         /** Primary emulated storage dir for direct access */
-        private final File mEmulatedDirForDirect;
+        private File mEmulatedDirForDirect;
 
         public UserEnvironment(int userId) {
-            // See storage config details at http://source.android.com/tech/storage/
-            String rawExternalStorage = System.getenv(ENV_EXTERNAL_STORAGE);
-            String rawEmulatedSource = System.getenv(ENV_EMULATED_STORAGE_SOURCE);
-            String rawEmulatedTarget = System.getenv(ENV_EMULATED_STORAGE_TARGET);
-
-            String rawMediaStorage = System.getenv(ENV_MEDIA_STORAGE);
-            if (TextUtils.isEmpty(rawMediaStorage)) {
-                rawMediaStorage = "/data/media";
-            }
-
-            ArrayList<File> externalForVold = Lists.newArrayList();
-            ArrayList<File> externalForApp = Lists.newArrayList();
-
-            if (!TextUtils.isEmpty(rawEmulatedTarget)) {
-                // Device has emulated storage; external storage paths should have
-                // userId burned into them.
-                final String rawUserId = Integer.toString(userId);
-                final File emulatedSourceBase = new File(rawEmulatedSource);
-                final File emulatedTargetBase = new File(rawEmulatedTarget);
-                final File mediaBase = new File(rawMediaStorage);
-
-                // /storage/emulated/0
-                externalForVold.add(buildPath(emulatedSourceBase, rawUserId));
-                externalForApp.add(buildPath(emulatedTargetBase, rawUserId));
-                // /data/media/0
-                mEmulatedDirForDirect = buildPath(mediaBase, rawUserId);
-
-            } else {
-                // Device has physical external storage; use plain paths.
-                if (TextUtils.isEmpty(rawExternalStorage)) {
-                    Log.w(TAG, "EXTERNAL_STORAGE undefined; falling back to default");
-                    rawExternalStorage = "/storage/sdcard0";
-                }
-
-                // /storage/sdcard0
-                externalForVold.add(new File(rawExternalStorage));
-                externalForApp.add(new File(rawExternalStorage));
-                // /data/media
-                mEmulatedDirForDirect = new File(rawMediaStorage);
-            }
-
-            // Splice in any secondary storage paths, but only for owner
-            final String rawSecondaryStorage = System.getenv(ENV_SECONDARY_STORAGE);
-            if (!TextUtils.isEmpty(rawSecondaryStorage) && userId == UserHandle.USER_OWNER) {
-                for (String secondaryPath : rawSecondaryStorage.split(":")) {
-                    externalForVold.add(new File(secondaryPath));
-                    externalForApp.add(new File(secondaryPath));
-                }
-            }
-
-            mExternalDirsForVold = externalForVold.toArray(new File[externalForVold.size()]);
-            mExternalDirsForApp = externalForApp.toArray(new File[externalForApp.size()]);
+		boolean swap = SystemProperties.getBoolean( "config.swapsd", false );
+
+		// STOCK
+		// mExternalDirsForVold[0]=/mnt/shell/emulated/0
+		// mExternalDirsForVold[1]=/storage/sdcard1
+		// mExternalDirsForApp[0]=/storage/emulated/0
+		// mExternalDirsForApp[1]=/storage/sdcard1
+		// mEmulatedDirForDirect=/data/media/0
+
+		ArrayList<File> externalForVold = Lists.newArrayList();
+		ArrayList<File> externalForApp = Lists.newArrayList();
+
+		if( !swap ) {
+			externalForVold.add(new File("/mnt/shell/emulated/0"));
+			externalForVold.add(new File("/storage/sdcard1"));
+			externalForApp.add(new File("/storage/emulated/0"));
+			externalForApp.add(new File("/storage/sdcard1"));
+			mEmulatedDirForDirect = new File("/data/media/0");
+		} else {
+			externalForVold.add(new File("/storage/sdcard1"));
+			externalForVold.add(new File("/storage/sdcard0"));
+			externalForApp.add(new File("/storage/sdcard1"));
+			externalForApp.add(new File("/storage/sdcard0"));
+			mEmulatedDirForDirect = new File("/mnt/media_rw/sdcard1");
+		}
+		mExternalDirsForVold = externalForVold.toArray(new File[externalForVold.size()]);
+		mExternalDirsForApp = externalForApp.toArray(new File[externalForApp.size()]);
         }
 
         @Deprecated
         public File getExternalStorageDirectory() {
-            return mExternalDirsForApp[0];
+		if( mExternalDirsForApp[0] != null ) {
+			Log.d( TAG, "getExternalStorageDirectory(): " + mExternalDirsForApp[0].getAbsolutePath() );
+		}
+		return mExternalDirsForApp[0];
         }
 
         @Deprecated
         public File getExternalStoragePublicDirectory(String type) {
-            return buildExternalStoragePublicDirs(type)[0];
+		File f = buildExternalStoragePublicDirs(type)[0];
+		if( f != null ) {
+			Log.d( TAG, "getExternalStoragePublicDirectory("+type+"): " + f.getAbsolutePath() );
+		}
+		return f;
         }
 
         public File[] getExternalDirsForVold() {
+		Log.d( TAG, "getExternalDirsForVold() : " + mExternalDirsForVold[0].getAbsolutePath() );
             return mExternalDirsForVold;
         }
 
         public File[] getExternalDirsForApp() {
+		Log.d( TAG, "getExternalDirsForApp() : " + mExternalDirsForApp[0].getAbsolutePath() );
             return mExternalDirsForApp;
         }
 
         public File getMediaDir() {
+		Log.d( TAG, "getMediaDir(): " + mEmulatedDirForDirect.getAbsolutePath() );
             return mEmulatedDirForDirect;
         }
 
         public File[] buildExternalStoragePublicDirs(String type) {
-            return buildPaths(mExternalDirsForApp, type);
+		File[] files = buildPaths(mExternalDirsForApp, type);
+		Log.d( TAG, "buildExternalStoragePublicDirs("+type+") : " + files[0].getAbsolutePath() );
+            return files;
         }
 
         public File[] buildExternalStorageAndroidDataDirs() {
-            return buildPaths(mExternalDirsForApp, DIR_ANDROID, DIR_DATA);
+		File[] files = buildPaths(mExternalDirsForApp, DIR_ANDROID, DIR_DATA);
+		Log.d( TAG, "buildExternalStorageAndroidDataDirs() : " + files[0].getAbsolutePath() );
+            return files;
         }
 
         public File[] buildExternalStorageAndroidObbDirs() {
-            return buildPaths(mExternalDirsForApp, DIR_ANDROID, DIR_OBB);
+		File[] files = buildPaths(mExternalDirsForApp, DIR_ANDROID, DIR_OBB);
+		Log.d( TAG, "buildExternalStorageAndroidObbDirs() : " + files[0].getAbsolutePath() );
+            return files;
         }
 
         public File[] buildExternalStorageAndroidObbDirsForVold() {
-            return buildPaths(mExternalDirsForVold, DIR_ANDROID, DIR_OBB);
+		File[] files = buildPaths(mExternalDirsForVold, DIR_ANDROID, DIR_OBB);
+		Log.d( TAG, "buildExternalStorageAndroidObbDirsForVold() : " + files[0].getAbsolutePath() );
+            return files;
         }
 
         public File[] buildExternalStorageAppDataDirs(String packageName) {
-            return buildPaths(mExternalDirsForApp, DIR_ANDROID, DIR_DATA, packageName);
+		File[] files = buildPaths(mExternalDirsForApp, DIR_ANDROID, DIR_DATA, packageName);
+		Log.d( TAG, "buildExternalStorageAppDataDirs("+packageName+") : " + files[0].getAbsolutePath() );
+            return files;
         }
 
         public File[] buildExternalStorageAppDataDirsForVold(String packageName) {
-            return buildPaths(mExternalDirsForVold, DIR_ANDROID, DIR_DATA, packageName);
+		File[] files = buildPaths(mExternalDirsForVold, DIR_ANDROID, DIR_DATA, packageName);
+		Log.d( TAG, "buildExternalStorageAppDataDirsForVold("+packageName+") : " + files[0].getAbsolutePath() );
+            return files;
         }
 
         public File[] buildExternalStorageAppMediaDirs(String packageName) {
-            return buildPaths(mExternalDirsForApp, DIR_ANDROID, DIR_MEDIA, packageName);
+		File[] files = buildPaths(mExternalDirsForApp, DIR_ANDROID, DIR_MEDIA, packageName);
+		Log.d( TAG, "buildExternalStorageAppMediaDirs("+packageName+") : " + files[0].getAbsolutePath() );
+            return files;
         }
 
         public File[] buildExternalStorageAppObbDirs(String packageName) {
-            return buildPaths(mExternalDirsForApp, DIR_ANDROID, DIR_OBB, packageName);
+		File[] files = buildPaths(mExternalDirsForApp, DIR_ANDROID, DIR_OBB, packageName);
+		Log.d( TAG, "buildExternalStorageAppMediaDirs("+packageName+") : " + files[0].getAbsolutePath() );
+            return files;
         }
 
         public File[] buildExternalStorageAppObbDirsForVold(String packageName) {
-            return buildPaths(mExternalDirsForVold, DIR_ANDROID, DIR_OBB, packageName);
+		File[] files = buildPaths(mExternalDirsForVold, DIR_ANDROID, DIR_OBB, packageName);
+		Log.d( TAG, "buildExternalStorageAppObbDirsForVold("+packageName+") : " + files[0].getAbsolutePath() );
+            return files;
         }
 
         public File[] buildExternalStorageAppFilesDirs(String packageName) {
-            return buildPaths(mExternalDirsForApp, DIR_ANDROID, DIR_DATA, packageName, DIR_FILES);
+		File[] files = buildPaths(mExternalDirsForApp, DIR_ANDROID, DIR_DATA, packageName, DIR_FILES);
+		Log.d( TAG, "buildExternalStorageAppFilesDirs("+packageName+") : " + files[0].getAbsolutePath() );
+            return files;
         }
 
         public File[] buildExternalStorageAppCacheDirs(String packageName) {
-            return buildPaths(mExternalDirsForApp, DIR_ANDROID, DIR_DATA, packageName, DIR_CACHE);
+		File[] files = buildPaths(mExternalDirsForApp, DIR_ANDROID, DIR_DATA, packageName, DIR_CACHE);
+		Log.d( TAG, "buildExternalStorageAppCacheDirs("+packageName+") : " + files[0].getAbsolutePath() );
+            return files;
         }
     }
 
@@ -855,3 +862,4 @@ public class Environment {
         return path;
     }
 }
+
diff --git a/data/etc/platform.xml b/data/etc/platform.xml
old mode 100644
new mode 100755
index b3153a9..f000721
--- a/data/etc/platform.xml
+++ b/data/etc/platform.xml
@@ -64,21 +64,30 @@
 
     <permission name="android.permission.READ_EXTERNAL_STORAGE" >
         <group gid="sdcard_r" />
+        <group gid="sdcard_rw" />
+        <group gid="sdcard_all" />
+        <group gid="media_rw" />
     </permission>
 
     <permission name="android.permission.WRITE_EXTERNAL_STORAGE" >
         <group gid="sdcard_r" />
         <group gid="sdcard_rw" />
+        <group gid="sdcard_all" />
+        <group gid="media_rw" />
     </permission>
 
     <permission name="android.permission.ACCESS_ALL_EXTERNAL_STORAGE" >
         <group gid="sdcard_r" />
         <group gid="sdcard_rw" />
         <group gid="sdcard_all" />
+	<group gid="media_rw" />
     </permission>
 
     <permission name="android.permission.WRITE_MEDIA_STORAGE" >
-        <group gid="media_rw" />
+        <group gid="sdcard_r" />
+        <group gid="sdcard_rw" />
+        <group gid="sdcard_all" />
+	<group gid="media_rw" />
     </permission>
 
     <permission name="android.permission.ACCESS_MTP" >
diff --git a/services/java/com/android/server/MountService.java b/services/java/com/android/server/MountService.java
old mode 100644
new mode 100755
index 18344bd..56646a4
--- a/services/java/com/android/server/MountService.java
+++ b/services/java/com/android/server/MountService.java
@@ -1328,7 +1328,7 @@ class MountService extends IMountService.Stub
         }
 
         final UserEnvironment userEnv = new UserEnvironment(user.getIdentifier());
-        final File path = userEnv.getExternalStorageDirectory();
+        final File path = new File( "/storage/sdcard0" );//userEnv.getExternalStorageDirectory();
         final StorageVolume volume = StorageVolume.fromTemplate(mEmulatedTemplate, path, user);
         volume.setStorageId(0);
         addVolumeLocked(volume);
